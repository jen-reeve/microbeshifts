plot(c(allprofs[[i]][,1],rev(seq(0.1,3.7, 0.1))), c(log(allprofs[[i]][,j]+0.0001),log(oldres[[i]][,j]+0.0001)),type="n", pch=21, bg="gray20", cex=0.5)
points(allprofs[[i]][,1], log(allprofs[[i]][,j]+0.0001), pch=21, cex=(allprofs[[i]][,'value']-min(allprofs[[i]][,'value'])+0.001)/10, bg="gray20")
lines(rev(seq(0.1,3.7, 0.1)), log(oldres[[i]][,j]+0.0001))
}
}
for(i in c("1_r1", "1_r2", "2.1_r1")){
prof.ARDR2 <- readRDS(paste("../output/prof_lba",i,".rds", sep=""))
tryerr <- (sapply(sapply(prof.ARDR2, function(x) any(sapply(x, class)=="try-error")), function(x) x[1]))
if(sum(tryerr)>0){
lnL.ARDR2 <- lapply(prof.ARDR2[-which(tryerr)], function(x) sapply(x, function(y) max(y$value, na.rm=TRUE)))
} else {
lnL.ARDR2 <- lapply(prof.ARDR2, function(x) sapply(x, function(y) max(y$value, na.rm=TRUE)))
}
lnL.ARDR2 <- do.call(rbind, lnL.ARDR2)
cslnL.ARDR2 <- apply(lnL.ARDR2, 2, cumsum)
lines(seq(3.6, 0.1, length.out=32), rev(cslnL.ARDR2[nrow(cslnL.ARDR2),]-min(cslnL.ARDR2)), col="red")
}
dev.off()
fits.ARDnotime <- fitFns(5, fns$ARD.notime, fns$tdList, res=NULL)
require(phytools)
require(diversitree)
require(geiger)
require(devtools)
require(testthat)
require(roxygen2)
require(rncl)
require(foreach)
require(doParallel)
require(aRbor)
require(optimx)
require(treeplyr)
setwd("~/GitHub/microbeshifts/analysis")
lbaFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/")
lbaTrees <- lapply(lbaFiles,function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/", x, sep="")))
goodFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/")
goodTrees <- lapply(goodFiles[grep("good", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
cyanosTrees <- lapply(goodFiles[grep("Cyanos", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
plot(goodTrees[1])
plot(goodTrees$treerep.490100)
View(goodTrees)
View(goodTrees)
plot(goodTrees[[1]]$treerep.489900)
plot(goodTrees[[1]]$treerep.489900[1])
goodTrees[1:2]
goodTrees[1]
goodTrees[1][1]
goodTrees[1][[1]]
goodTrees[1][[1]]$treerep.489900=1
goodTrees[1][[1]]$treerep.489900=
3
plot(goodTrees[1][[1]]$treerep.489900)
plot.phylo(goodTrees[1][[1]]$treerep.489900)
plot.phylo(goodTrees[1][[1]])
goodTrees[1][[1:2]]
plot(goodTrees[1][[1:2]])
source('~/GitHub/microbeshifts/analysis/jreeve_analysis.R')
dat <- clean.data()
tree <- lbaTrees[[2]][[1]]
trees <- list(goodTrees[[1]][1:2], goodTrees[[2]][1:2], goodTrees[[3]][1:2], goodTrees[[4]][1:2])
fns <- make.bisse.fns(tree, dat)
registerDoParallel(cores=8)
fits.ARDnotime <- fitFns(5, fns$ARD.notime, fns$tdList, res=NULL)
View(fns)
?clean.data()
View(dat)
source('~/GitHub/microbeshifts/analysis/jreeve_analysis.R')
View(fns)
View(dat)
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
nc <- ncol(tdcy$dat)
tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat <- list(td=tcdy,tdList=tdcyList)
return(treedat)
}
tree.dat <- make.treedat(tree, dat)
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
nc <- ncol(tdcy$dat)
tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
tree.dat <- make.treedat(tree, dat)
View(tree.dat)
tree.dat[1]
plot(tree.dat[1])
plot(tree.dat[1]$td)
tree.dat[2]
plot(tree.dat[1][[1:2]])
plot(tree.dat$tdList[1][[1:2]])
plot(tree.dat$tdList[1])
tdcy<-tree.dat[1]
tdcy
plot(tdcy[1])
plot(tdcy[1][[1:2]])
tdcy$td$phy
plot(tdcy$td$phy)
plot(tree.dat$td$td$phy)
plot(tree.dat$td$phy)
dat
View(dat)
dat %>%
mutate(sal_simp = case_when(Freshwater_habitat == 1  ~ 0,
Freshwater_habitat == 0 ~ 35,
TRUE ~ 0))
source('~/GitHub/microbeshifts/analysis/jreeve_analysis.R')
source('~/GitHub/microbeshifts/analysis/jreeve_analysis.R')
tree.dat <- make.treedat(tree, dat_simp)
View(dat_simp)
row.names(dat_simp) <- row.names(dat)
tree.dat <- make.treedat(tree, dat_simp)
test <- fastAnc(tree.dat$td$phy,tree.dat$td$dat$sal_simp)
test
phenogram(tree.dat$td$phy,tree.dat$td$dat$sal_simp,fsize=0.6,spread.costs=c(1,0))
phenogram(tree.dat$td$phy,tree.dat$td$dat$sal_simp
)
obj<-contMap(tree.dat$td$phy,tree.dat$td$dat$sal_simp,plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree.dat$td$phy)))
obj<-contMap(tree.dat$td$phy,tree.dat$td$dat$sal_simp,plot=FALSE)
test <- fastAnc(tree.dat$td$phy,tree.dat$td$dat$sal_simp)
hello <- fastAnc(tree.dat$td$phy,tree.dat$td$dat$sal_simp)
test <- fastAnc(tree.dat$td$phy,tree.dat$td$dat$sal_simp,vars = TRUE,CI=TRUE)
test$CI95[1,]
install.packages("truncdist")
## @knitr drawing from distributions
require(truncdist)
fresh_dist <- rtrunc(1,a=0,b=Inf,spec="norm")
dat_dist <- dat %>%
mutate(sal_dist = case_when(Freshwater_habitat == 1 ~ rtrunc(1,a=0,b=Inf,spec="norm"),
Freshwater_habitat == 0 ~ rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4),
TRUE ~ 0))
View(dat_dist)
for (i in 1:length(dat$Freshwater_habitat)){
dat_dist <- dat
if (dat$Freshwater_habitat[i] == 1){
dat_dist$sal_dist <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat$Freshwater_habitat[i] == 0){
dat_dist$sal_dist <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
for (i in 1:length(dat$Freshwater_habitat)){
dat_dist <- dat
if (dat$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
dat_dist<-dat
for (i in 1:length(dat$Freshwater_habitat)){
dat_dist <- dat
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat)))
if (dat$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
dat_dist$Freshwater_habitat[1]==0
dat_dist$Freshwater_habitat[1]==1
for (i in 1:length(dat$Freshwater_habitat)){
dat_dist <- dat
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat)))
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
else (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
for (i in 1:length(dat$Freshwater_habitat)){
dat_dist <- dat
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat)))
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
dat_dist <- dat
for (i in 1:length(dat_dist$Freshwater_habitat)){
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat)))
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
dat_dist <- dat
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat)))
for (i in 1:length(dat_dist$Freshwater_habitat)){
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm")
}
if (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
}
dat_dist <- dat # replicate the dataset
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat))) # make an empty salinity distribution column
for (i in 1:length(dat_dist$Freshwater_habitat)){
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm",mean=0,sd=5) # truncated normal distribution so no negative salinities
}
if (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
} # loops over the dataframe and draws from one of two distributions to assign salinity optima based on habitat
obj<-contMap(tree,dat_simp$sal_simp,plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
obj<-contMap(tree.dat$td$phy,tree.dat$td$dat$sal_simp,plot=FALSE)
tree.dat <- make.treedat(tree, dat_simp)
tree.dat$td$dat$sal_simp
tree.dat$td$phy
plot(tree.dat$td$phy)
tree.dat <- make.treedat(tree, dat_simp)
obj<-contMap(tree.dat$td$phy,tree.dat$td$dat$sal_simp,plot=FALSE)
fastAnc(tree.dat$td$phy,tree.dat$td$dat$sal_simp)
plotTree(tree.dat$td$phy,type="fan")
dotTree(tree.dat$td$phy,tree.dat$td$dat$sal_simp)
dotTree(tree.dat$td$phy,tree.dat$td$dat$Freshwater_habitat)
testree<-tree.dat$td$phy
testdat<-tree.dat$td$dat
dotTree(testree,testdat$sal_simp)
dotTree(testree,testdat$sal_simp,fsize=0.6)
data("anoletree")
ecomorph<-as.factor(getStates(anoletree,"tips"))
dotTree(anoletree,ecomorph)
svl<-read.csv("http://www.phytools.org/Ilhabela2015/data/svl.csv",
header=TRUE,row.names=1)
## or svl<-read.csv("svl.csv",header=TRUE,row.names=1)
svl<-as.matrix(svl)[,1]
dotTree(testree,testdat$Thermophilic)
dotTree(testree,testdat$Thermophilic,fsize=0.6)
dotTree(testree,testdat$sal_simp,fsize=0.6)
dotTree(tree.dat$td$phy,tree.dat$td$dat$Habit)
plotTree(tree.dat$td$phy)
?plotTree()
getStates(tree.dat$td$phy,type="tips")
?make.treedata
test<-make.treedata(tree,dat_simp,name_column = 0)
View(test)
dotTree(test$phy,test$dat$sal_simp)
test$phy$tip.label
rownames(test$dat)
colnames(test$dat)
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
#nc <- ncol(tdcy$dat)
#tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
#tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat<-tdcy
#treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
test<-make.treedat(tree,dat_simp)
dotTree(test$phy,test$dat$sal_dist)
dotTree(test$phy,test$dat$sal_simp)
dotTree(test$phy,test$dat$sal_simp,fsize=0.6)
dotTree(test$phy,test$dat$sal_simp,fsize=0.2)
?dotTree
frame()
dotTree(test$phy,test$dat$sal_simp,fsize=0.2)
dotTree(test$phy,test$dat$sal_simp,fsize=0.2,type="fan")
dotTree(test$phy,test$dat$sal_simp,fsize=0.2)
dotTree(test$phy,test$dat$sal_simp,fsize=0.2,legend = FALSE)
dotTree(test$phy,test$dat$sal_simp,fsize=0.2)
small_tree<-drop.clade(tree,"Synechococcus.sp.PCC7002")
plotTree(small_tree)
plotTree(tree)
small_tree<-drop.clade(tree,"Synechococcus.sp.PCC7002")%>%drop.clade("Gloeobacter.violaceus.PCC7421")
plotTree(small_tree)
tips.drop<-tree$tip.label[1:(0.5*length(tree$tip.label))]
small_tree<-drop.clade(tree,tips.drop)
plotTree(small_tree)
test<-make.treedat(small_tree,dat)
test<-make.treedat(small_tree,dat_dist)
dotTree(test$phy,test$dat$sal_dist)
dotTree(test$phy,test$dat$sal_dist,fsize=0.2)
obj<-contMap(test$phy,test$dat$sal_simp,plot=FALSE)
obj<-contMap(test$phy,test$dat$sal_dist,plot=FALSE)
dotTree(test$phy,test$dat$sal_dist,fsize=0.2)
test$phy
test$dat$sal_dist
dotTree(test$phy,test[["sal_dist"]],fsize=0.2)
test
test[["sal_dist"]]
require(phytools)
require(diversitree)
require(geiger)
require(devtools)
require(testthat)
require(roxygen2)
require(rncl)
require(foreach)
require(doParallel)
require(aRbor)
require(optimx)
require(treeplyr)
setwd("~/GitHub/microbeshifts/analysis")
lbaFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/")
lbaTrees <- lapply(lbaFiles,function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/", x, sep="")))
goodFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/")
goodTrees <- lapply(goodFiles[grep("good", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
cyanosTrees <- lapply(goodFiles[grep("Cyanos", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
lba.ntips <- lapply(lbaTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
good.ntips <- lapply(goodTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
cyanos.ntips <- lapply(cyanosTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
lba.species <- unique(unlist(sapply(lbaTrees, function(x) x[[1]]$tip.label)))
good.species <- unique(unlist(sapply(goodTrees, function(x) x[[1]]$tip.label)))
cyanos.species <- unique(unlist(sapply(cyanosTrees, function(x) x[[1]]$tip.label)))
all.species <- unique(c(lba.species, good.species, cyanos.species))
dat <- clean.data()
tree <- lbaTrees[[2]][[1]]
trees <- list(goodTrees[[1]][1:2], goodTrees[[2]][1:2], goodTrees[[3]][1:2], goodTrees[[4]][1:2])
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
#nc <- ncol(tdcy$dat)
#tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
#tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat<-tdcy
#treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
tree.dat <- make.treedat(tree, dat)
plot(tree.dat$td$phy)
## @knitr simplest salinity as continuous
dat_simp <- dat %>%
mutate(sal_simp = case_when(Freshwater_habitat == 1  ~ 0,
Freshwater_habitat == 0 ~ 35,
TRUE ~ 0))
row.names(dat_simp) <- row.names(dat)
tree.dat <- make.treedat(tree, dat_simp)
obj<-contMap(tree.dat$phy,tree.dat$dat[["sal_simp"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
tree.dat$dat[["sal_simp"]]
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
nc <- ncol(tdcy$dat)
tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat<-tdcy
treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
tree.dat <- make.treedat(tree, dat)
plot(tree.dat$td$phy)
## @knitr simplest salinity as continuous
dat_simp <- dat %>%
mutate(sal_simp = case_when(Freshwater_habitat == 1  ~ 0,
Freshwater_habitat == 0 ~ 35,
TRUE ~ 0))
row.names(dat_simp) <- row.names(dat)
tree.dat <- make.treedat(tree, dat_simp)
obj<-contMap(tree.dat$td$phy,tree.dat$td$dat[["sal_simp"]],plot=FALSE)
tree.dat$td$dat[["sal_simp"]]
tree.dat$td[["sal_simp"]]
obj<-contMap(tree.dat$td$phy,tree.dat$td[["sal_simp"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
require(truncdist)
dat_dist <- dat # replicate the dataset
dat_dist$sal_dist <- c(rep(NA,length(dat_dist$Freshwater_habitat))) # make an empty salinity distribution column
for (i in 1:length(dat_dist$Freshwater_habitat)){
if (dat_dist$Freshwater_habitat[i] == 1){
dat_dist$sal_dist[i] <- rtrunc(1,a=0,b=Inf,spec="norm",mean=0,sd=5) # truncated normal distribution so no negative salinities
}
if (dat_dist$Freshwater_habitat[i] == 0){
dat_dist$sal_dist[i] <- rtrunc(1,a=-Inf,b=Inf,spec="norm",mean=35,sd=4)
}
} # loops over the dataframe and draws from one of two distributions to assign salinity optima based on habitat
obj<-contMap(tree.dat$td$phy,tree.dat$td[["sal_dist"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
obj<-contMap(tree.dat$td$phy,tree.dat$td[["sal_dist"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
obj2<-contMap(tree.dat$td$phy,tree.dat$td[["sal_dist"]],plot=FALSE)
plot(obj2,type="fan",legend=0.7*max(nodeHeights(tree)))
obj2<-contMap(tree.dat$td$phy,tree.dat$td["sal_dist"],plot=FALSE)
tree.dat$td[["sal_dist"]]
tree.dat$td$dat[["sal_dist"]]
tree.dat <- make.treedat(tree,dat_dist)
obj2<-contMap(tree.dat$td$phy,tree.dat$td[["sal_dist"]],plot=FALSE)
plot(obj2,type="fan",legend=0.7*max(nodeHeights(tree)))
plot(obj2,legend=0.7*max(nodeHeights(tree)))
knitr::opts_chunk$set(echo = TRUE)
require(phytools)
require(diversitree)
require(geiger)
require(devtools)
require(testthat)
require(roxygen2)
require(rncl)
require(foreach)
require(doParallel)
require(aRbor)
require(optimx)
require(treeplyr)
require(truncdist)
setwd("~/GitHub/microbeshifts/analysis")
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
nc <- ncol(tdcy$dat)
tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat<-tdcy
treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
?fastAnc
dat_simp <- dat %>%
mutate(sal_simp = case_when(Freshwater_habitat == 1  ~ 0,
Freshwater_habitat == 0 ~ 35,
TRUE ~ 0))
row.names(dat_simp) <- row.names(dat)
tree.dat <- make.treedat(tree, dat_simp)
obj<-contMap(tree.dat$td$phy,tree.dat$td[["sal_simp"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
fit <- fastANC(tree.dat$td$phy,tree.dat$td[["sal_simp"]],vars=TRUE, CI=TRUE)
require(phytools)
require(diversitree)
require(geiger)
require(devtools)
require(testthat)
require(roxygen2)
require(rncl)
require(foreach)
require(doParallel)
require(aRbor)
require(optimx)
require(treeplyr)
require(truncdist)
setwd("~/GitHub/microbeshifts/analysis")
make.treedat <- function(tree, dat){
## set branch lengths to by
#tree$edge.length <- tree$edge.length/1000
## Combine tree
tdcy <- make.treedata(tree, dat, name_column=0)
rownames(tdcy$dat) <- tdcy$phy$tip.label
colnames(tdcy$dat) <- gsub("/", "_", colnames(tdcy$dat), fixed=TRUE)
nc <- ncol(tdcy$dat)
tdcyList <- lapply(1:nc, function(x) select(tdcy, x))
tdcyList <- lapply(1:nc, function(x) filter_(tdcyList[[x]], paste("!is.na(",names(tdcyList[[x]]$dat),")", sep="")))
treedat<-tdcy
treedat <- list(td=tdcy,tdList=tdcyList)
return(treedat)
}
lbaFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/")
lbaTrees <- lapply(lbaFiles,function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Exhibiting Long Branch Attraction/Posterior probability distribution of time trees/", x, sep="")))
goodFiles <- list.files("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/")
goodTrees <- lapply(goodFiles[grep("good", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
cyanosTrees <- lapply(goodFiles[grep("Cyanos", goodFiles)], function(x) read.tree(paste("../data/Posterior Probability Sampling of Trees/Trees Without Known Long Branch Attraction Artifacts/Posterior distribution of trees where branch lengths are scaled to age/", x, sep="")))
lba.ntips <- lapply(lbaTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
good.ntips <- lapply(goodTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
cyanos.ntips <- lapply(cyanosTrees, function(x) unname(sapply(x, function(y) length(y$tip.label))))
lba.species <- unique(unlist(sapply(lbaTrees, function(x) x[[1]]$tip.label)))
good.species <- unique(unlist(sapply(goodTrees, function(x) x[[1]]$tip.label)))
cyanos.species <- unique(unlist(sapply(cyanosTrees, function(x) x[[1]]$tip.label)))
all.species <- unique(c(lba.species, good.species, cyanos.species))
dat <- clean.data()
tree <- lbaTrees[[2]][[1]]
trees <- list(goodTrees[[1]][1:2], goodTrees[[2]][1:2], goodTrees[[3]][1:2], goodTrees[[4]][1:2])
tree.dat <- make.treedat(tree, dat)
plot(tree.dat$td$phy)
dat_simp <- dat %>%
mutate(sal_simp = case_when(Freshwater_habitat == 1  ~ 0,
Freshwater_habitat == 0 ~ 35,
TRUE ~ 0))
row.names(dat_simp) <- row.names(dat)
tree.dat <- make.treedat(tree, dat_simp)
obj<-contMap(tree.dat$td$phy,tree.dat$td[["sal_simp"]],plot=FALSE)
plot(obj,type="fan",legend=0.7*max(nodeHeights(tree)))
fit <- fastAnc(tree.dat$td$phy,tree.dat$td[["sal_simp"]],vars=TRUE, CI=TRUE)
plot(obj,type="fan")
plot(obj,type="fan",legend=1*max(nodeHeights(tree)))
